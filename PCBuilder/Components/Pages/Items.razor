@page "/components"
@using System.ComponentModel.DataAnnotations
@using PCBuilder.Components.Account.Shared
@using PCBuilder.Components.Shared
@using PCBuilder.Context
@using PCBuilder.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject ComponentProvider ComponentProvider
@inject ShopBasket Basket;

<PageTitle>Components</PageTitle>

@if (components is null)
{
    <p>Loading....</p>
}
else if (!components.Any())
{
    <p>No components found 😔</p>
}
else
{
    <div class="container">
        <div class="d-flex justify-content-between flex-column flex-md-row mb-1">
            <!-- Section for sorting options and a search bar.-->
            <div class="d-flex">
                <div class="dropdown me-1">
                    <!-- Dropdown button for sorting components by various criteria.-->
                    <a class="btn btn-outline-primary dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Sort by @sortCriteria.ToString()
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Name)">Name</a></li>
                        <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Price)">Price</a></li>
                        <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Brand)">Brand</a></li>
                    </ul>
                </div>
                <!-- Input field for searching components by name or other attributes.-->
                <input type="text" class="form-control" placeholder="Search for components..." @bind="searchTerm" @bind:event="oninput" />
            </div>
            <!-- Cart button displaying the current number of items in the basket.-->
            <div class="d-flex justify-content-end mt-2 mt-md-0">
                <a @onclick="GoToCart" class="btn btn-outline-primary">
                    🛒Cart (@Basket.Count())
                </a>
            </div>
        </div>

        <!-- Grid layout for displaying filtered components.-->
        <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 g-4">
            @foreach (var Component in FilteredComponents)
            {
            <!-- Render each component using a "StoreItem" component.-->
                <div class="col">
                    <StoreItem Component="Component" />
                </div>
            }
            @if (!FilteredComponents.Any())
            {
                <p>No components found 😔</p>
            }
        </div>
    </div>
}

@code {

    private IEnumerable<Component>? components;
    private string searchTerm = string.Empty;
    private SortCriteria sortCriteria = SortCriteria.Name;

    private IEnumerable<Component> FilteredComponents => components?.Where(FilterBySearchTerm).OrderBy(SortByCriteria) ?? Enumerable.Empty<Component>();

    protected override async Task OnInitializedAsync()
    {
        components = await ComponentProvider.GetAllComponentsAsync();

        if (!components.Any())
        {
            Console.WriteLine("No components loaded.");
        }

        Basket.OnCartUpdated += StateHasChanged;
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/basket");
    }

    private void Sort(SortCriteria criteria)
    {
        sortCriteria = criteria;
        StateHasChanged();
    }

    private bool FilterBySearchTerm(Component component)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return component.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true
            || component.Brand?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true;
    }

    private object SortByCriteria(Component component)
    {
        return sortCriteria switch
        {
            SortCriteria.Name => component.Name,
            SortCriteria.Price => component.Price,
            SortCriteria.Brand => component.Brand,
            SortCriteria.Rating => component.Rating,
            _ => component.Id
        };
    }

    private enum SortCriteria
    {
        Name,
        Price,
        Brand,
        Rating
    }
}