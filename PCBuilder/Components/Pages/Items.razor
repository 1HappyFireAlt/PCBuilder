@page "/components"
@using System.ComponentModel.DataAnnotations
@using PCBuilder.Components.Account.Shared
@using PCBuilder.Components.Shared
@using PCBuilder.Context
@using PCBuilder.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject ComponentProvider ComponentProvider
@inject ShopBasket Basket;

<PageTitle>Components</PageTitle>

<div class="container">
        <div class="d-flex justify-content-between flex-column flex-md-row mb-1">
            <!-- Section for sorting options and a search bar.-->
            <div class="d-flex">
                <select @onchange="SortComponents">
                    <option value="Name" selected>Name</option>
                    <option value="Price">Price</option>
                    <option value="Brand">Brand</option>
                </select>
                <!-- Input field for searching components by name or other attributes.-->
                <input @bind="searchTerm" @oninput="SearchComponents" placeholder="Search for components..." />
            </div>
            <!-- Cart button displaying the current number of items in the basket.-->
            <div class="d-flex justify-content-end mt-2 mt-md-0">
                <a @onclick="GoToCart" class="btn btn-outline-primary">
                    🛒Cart (@Basket.Count())
                </a>
            </div>
        </div>
</div>
@if (components is null)
{
    <p>Loading....</p>
}
else if (!components.Any())
{
    <p>No components found 😔</p>
}
else
{
        <!-- Grid layout for displaying filtered components.-->
        <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 g-4">
            @foreach (var Component in components)
            {
                <!-- Render each component using a "StoreItem" component.-->
                <div class="col">
                    <StoreItem Component="Component" />
                </div>
            }
            @if (!components.Any())
            {
                <p>No components found 😔</p>
            }
        </div>
}

@code {

    private IEnumerable<Component>? components;
    private string searchTerm = string.Empty;
    private string selectedSort = "Name";
    private List<Component> filteredComponents = new();

    // Called when the component is initialises
   
    protected override async Task OnInitializedAsync()
    {
        components = await ComponentProvider.GetAllComponentsAsync();

        if (!components.Any())
        {
            Console.WriteLine("No components loaded.");
        }

        Basket.OnCartUpdated += StateHasChanged;
    }

    // Navigates the user to the basket page
    private void GoToCart()
    {
        NavigationManager.NavigateTo("/basket");
    }

    private void SearchComponents()
    {
           // Filter components whose Name or Brand contains the search term  
            components = components
                .Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            c.Brand.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
    }

    // Sorts the components based on the selected criteria
    private void SortComponents(ChangeEventArgs e)
    {
        selectedSort = e.Value.ToString();

        components = selectedSort switch
        {
            "Name" => components.OrderBy(c => c.Name).ToList(),
            "Price" => components.OrderBy(c => c.Price).ToList(),
            "Brand" => components.OrderBy(c => c.Brand).ToList(),
            _ => components
        };
    }
}