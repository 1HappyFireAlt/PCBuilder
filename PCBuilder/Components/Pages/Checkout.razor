@page "/checkout"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using PCBuilder.Context
@using PCBuilder.Components.Account.Shared
@using PCBuilder.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject OrderProvider OrderProvider
@inject PaymentDetails PaymentDetails
@inject BasketItem BasketItem
@inject ShopBasket Basket
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager

<h3>Basket</h3>


<h3>Checkout</h3>

<h3>Checkout</h3>
<div class="card mb-1">
    <div class="card-body bg-light">
        <h4 class="card-title">Order Summary</h4>
        <BasketShop />
    </div>
</div>

<EditForm EditContext="editContext" OnValidSubmit="MakePayment">
    <DataAnnotationsValidator />
    <div class="row mb-2">
        <div class="col-lg-6 col-12 mt-1">
            <div class="card h-100">
                <div class="card-body bg-light">
                    <h4 class="card-title">Customer</h4>
                    <div class="form-group mb-1">
                        <label class="form-label">Name</label>
                        <input class="form-control" value="@GetFormattedName(user)" disabled />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Address</label>
                        <textarea class="form-control" rows="3" style="resize: none" disabled />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Email</label>
                        <input class="form-control" value="@user.Email" disabled />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-12 mt-lg-1 mt-2">
            <div class="card h-100">
                <div class="card-body bg-light">
                    <h4 class="card-title">Payment</h4>
                    <div class="form-group mb-1">
                        <label class="form-label">Name on card</label>
                        <InputText class="form-control" placeholder="@GetFormattedName(user)" @bind-Value="PaymentDetails.NameOnCard" />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Card number</label>
                        <InputText class="form-control" placeholder="0000-0000-0000-0000" @bind-Value="PaymentDetails.CardNumber" />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Expiry Date</label>
                        <InputText class="form-control" placeholder="12/23" @bind-Value="PaymentDetails.ExpiryDate" />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Security Code</label>
                        <InputText class="form-control" placeholder="123" @bind-Value="PaymentDetails.SecurityCode" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-between">
        <div>
            <button @onclick="GoToCart" class="btn btn-outline-primary">🛒 Back to Cart</button>
        </div>
        <div>
            <button type="submit" class="btn btn-outline-danger">
            </button>
        </div>
    </div>

</EditForm>

@code {
    private User user;
    private EditContext editContext;
    private bool isPaying;


    protected override async Task OnInitializedAsync()
    {
        PaymentDetails = new PaymentDetails();
        editContext = new EditContext(PaymentDetails);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
    }

    private async Task MakePayment()
    {
        await SimulatePayment();

        await OrderProvider.CreateOrder(user, Basket.GetItems());
        Basket.Clear();
        NavigationManager.NavigateTo("/thank-you");
    }

    private async Task SimulatePayment()
    {
        isPaying = true;
        StateHasChanged();

        await Task.Delay(2000);

        isPaying = false;
        StateHasChanged();
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }


    private string GetFormattedName(User user)
    {
        if (user == null) return "Unknown User";
        return $"{user.Name}";
    }
}