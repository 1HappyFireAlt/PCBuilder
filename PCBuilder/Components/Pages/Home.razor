@page "/"
@using System.ComponentModel.DataAnnotations
@using PCBuilder.Components.Account.Shared
@using PCBuilder.Context
@using PCBuilder.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject ComponentProvider ComponentProvider
@inject ShopBasket Basket;

<PageTitle>Home</PageTitle>

@if (components is null)
{
    <p>Loading....</p>
}
else if (!components.Any())
{
    <p>No components found 😔</p>
}

<div class="container">
    <div class="d-flex justify-content-between flex-column flex-md-row mb-1">
        <div class="d-flex">
            <div class="dropdown me-1">
                <a class="btn btn-outline-primary dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Sort by @sortCriteria.ToString()
                </a>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Name)">Name</a></li>
                    <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Price)">Price</a></li>
                    <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Brand)">Brand</a></li>
                    <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Rating)">Rating</a></li>
                </ul>
            </div>
            <input type="text" class="form-control" placeholder="Search for components..." @bind="searchTerm" @bind:event="oninput" />
        </div>
        <div class="d-flex justify-content-end mt-2 mt-md-0">
            <a @onclick="GoToCart" class="btn btn-outline-primary">🛒Cart (@Basket.Count())
            </a>
        </div>
    </div>

    <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 g-4">
        @foreach (var component in FilteredComponents)
        {
            <div class="col">
                <StoreItem Component="component" />
            </div>
        }
        @if (!FilteredComponents.Any())
        {
            <p>No components found 😔</p>
        }
    </div>
</div>

@code {
    private IEnumerable<Component> components;
    private string searchTerm = "";
    private SortCriteria sortCriteria = SortCriteria.Name;

    private IEnumerable<Component> filteredComponents;
    private IEnumerable<Component> FilteredComponents
    {
        get
        {
            return filteredComponents.Where(GetSearchCriteria);
        }
        set
        {
            filteredComponents = value;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        components = await ComponentProvider.GetAllComponentsAsync();
        filteredComponents = components;
        Basket.OnCartUpdated += StateHasChanged;
    }

    private void GoToCart() 
    {
        NavigationManager.NavigateTo("/cart");
    }

    private void Sort(SortCriteria criteria)
    {
        sortCriteria = criteria;
        filteredComponents = criteria switch
        {
            SortCriteria.Name => FilteredComponents = filteredComponents.OrderBy(c => c.Name),
            SortCriteria.Price => FilteredComponents = filteredComponents.OrderBy(c => c.Price),
            SortCriteria.Brand => FilteredComponents = filteredComponents.OrderBy(c => c.Brand),
            SortCriteria.Rating => FilteredComponents = filteredComponents.OrderBy(c => c.Rating),
            _ => filteredComponents
        };
    }

    private bool GetSearchCriteria(Component component)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return component.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || component.Brand.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
    }

    private enum SortCriteria
    {
        Name,
        Price,
        Brand,
        Rating
    }
}
