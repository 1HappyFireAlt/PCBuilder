@page "/builder"
@using System.ComponentModel.DataAnnotations
@using PCBuilder.Components.Account.Shared
@using PCBuilder.Components.Shared
@using PCBuilder.Context
@using PCBuilder.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject Component Component
@inject ComponentProvider ComponentProvider
@inject ShopBasket Basket


<h3>New Build</h3>

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>Total Cost: $@TotalCost</h4>
        <button class="btn btn-outline-primary" @onclick="SubmitBuild">Submit Build</button>
    </div>
    <div>
        <div class="list-group">
            @foreach (var category in ComponentCategories)
            {
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <i class="@category.IconClass me-2"></i> @category.Name
                    </div>

                    @if (category.SelectedComponent != null)
                    {
                        <div>
                            <td>
                                <img src="/img/components/@category.SelectedComponent.ImageUrl" alt="@category.SelectedComponent.Name" class="img-thumbnail" style="max-width: 100px;">
                            </td>
                            <p><strong>@category.SelectedComponent.Name</strong></p>
                            <p>Brand: @category.SelectedComponent.Brand</p>
                            <p>Price: $@category.SelectedComponent.Price</p>
                        </div>
                        <button class="btn btn-danger" @onclick="() => RemoveComponent(category)">
                            Remove
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-outline-primary" @onclick="() => OpenComponentSelection(category)">
                            + Choose @category.Name
                        </button>
                    }
                </div>
                }
            </div>
        </div>
    </div>
@if (ShowModel)
{  
<div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <!-- Display the current category for certain components that are being selected-->
                    <h5 class="modal-title">Choose @CurrentCategory.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                @foreach (var component in CurrentOptions)
                {
                    <div class="d-flex justify-content-between align-items-center mb-2">
                    <tr>
                        <!-- Component Name -->
                        <td>@component.Category</td>

                        <!-- Product Image -->
                        <td>
                            <img src="/img/components/@component.ImageUrl" alt="@component.Name" class="img-thumbnail" style="max-width: 100px;">
                        </td>

                        <!-- Product Details -->
                        <td>
                            <div>
                                <strong>@component.Name</strong>
                                <p class="mb-1">Brand: @component.Brand</p>
                            </div>
                        </td>

                        <!-- Price -->
                        <td>£@component.Price</td>

                        <button class="btn btn-sm btn-outline-primary" @onclick="() => SelectComponent(component)">
                            Select
                        </button>
                    </tr>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
}

@code {
    private float TotalCost => ComponentCategories.Where(c => c.SelectedComponent != null)
        .Sum(c => c.SelectedComponent.Price);

    private Dictionary<string, Component> SelectedComponents = new();
    private bool ShowModel = false;
    private List<Component> CurrentOptions = new();
    private ComponentCategory CurrentCategory;

    private void SelectComponent(Component component)
    {
        CurrentCategory.SelectedComponent = component;
        CloseModal();
    }


    private List<ComponentCategory> ComponentCategories = new()
    {
        new ComponentCategory
        {
            Name = "Processor",
            IconClass = "bi bi-cpu",
        },
        new ComponentCategory
        {
            Name = "Motherboard",
            IconClass = "bi bi-motherboard",
        },
        new ComponentCategory
        {
            Name = "Storage",
            IconClass = "bi bi-storage",
        },
        new ComponentCategory
        {
            Name = "Graphics Card",
            IconClass = "bi bi-gpu",
        },
        new ComponentCategory
        {
            Name = "Power Supply",
            IconClass = "bi bi-powersupply",
        },
        new ComponentCategory
        {
            Name = "Cooling",
            IconClass = "bi bi-cooling",
        },
        new ComponentCategory
        {
            Name = "Case",
            IconClass = "bi bi-case",
        },
        new ComponentCategory
        {
            Name = "Monitor",
            IconClass = "bi bi-monitor",
        },
        new ComponentCategory
        {
            Name = "Mouse",
            IconClass = "bi bi-mouse",
        },
        new ComponentCategory
        {
            Name = "Keyboard",
            IconClass = "bi bi-keyboard",
        }
    };

    private async Task OpenComponentSelection(ComponentCategory category)
    {
        CurrentCategory = category;
        CurrentOptions = await ComponentProvider.GetComponentsByCategoryAsync(category);
        ShowModel = true;
    }

    private void RemoveComponent(ComponentCategory category)
    {
        category.SelectedComponent = null;
    }

    private void CloseModal()
    {
        ShowModel = false;
    }

    private void SubmitBuild()
    {
        NavigationManager.NavigateTo("/summary");
    }
}
