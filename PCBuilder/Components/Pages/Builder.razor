@page "/builder"
@using System.ComponentModel.DataAnnotations
@using PCBuilder.Components.Account.Shared
@using PCBuilder.Components.Shared
@using PCBuilder.Context
@using PCBuilder.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject Component Component
@inject ComponentProvider ComponentProvider
@inject ShopBasket Basket;

<h3>New Build</h3>

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>Total Cost: $@TotalCost</h4>
        <button class="btn btn-outline-primary" @onclick="SubmitBuild">Submit Build</button>
    </div>

    <!-- Component List -->
    <div class="list-group">
        @foreach (var category in ComponentCategories)
        {
            <div class="list-group-item d-flex justify-content-between align-items-center">
                <!-- Icon and Name -->
                <div>
                    <i class="@category.IconClass me-2"></i> @category.Name
                </div>

                <!-- Choose Button -->
                <button class="btn btn-outline-primary" @onclick="() => OpenComponentSelection(category)">+ Choose @category.Name</button>
            </div>
        }
    </div>
</div>
<!-- Modal for Selecting a Component -->
@if (ShowModel)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <!-- Display the current category for certain components that are being selected-->
                    <h5 class="modal-title">Choose @CurrentCategory.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (CurrentOptions.Any())
                    {
                        @foreach (var option in CurrentOptions)
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span>@option.Name ($@option.Price)</span>
                                <!-- Button to select the component-->
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => SelectComponent(option)">
                                    Select
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No components available for this category.</p>
                    }
                </div>
                <div class="modal-footer">
                    <!-- Close buttonf for model -->
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    // Tracks the total cost of selected components
    private float TotalCost => SelectedComponents.Values.Sum(c => c.Price);

    private Dictionary<string, Component> SelectedComponents = new();
    private bool ShowModel = false;
    private List<Component> CurrentOptions = new();
    private ComponentCategory CurrentCategory;

    private List<ComponentCategory> ComponentCategories = new()
    {
        new ComponentCategory
        {
            Name = "Processor",
            IconClass = "bi bi-cpu",
        },
        new ComponentCategory
        {
            Name = "Motherboard",
            IconClass = "bi bi-motherboard",
        },
        new ComponentCategory
        {
            Name = "Storage",
            IconClass = "bi bi-storage",
        },
        new ComponentCategory
        {
            Name = "Graphics Card",
            IconClass = "bi bi-gpu",
        },
        new ComponentCategory
        {
            Name = "Power Supply",
            IconClass = "bi bi-powersupply",
        },
        new ComponentCategory
        {
            Name = "Cooling",
            IconClass = "bi bi-cooling",
        },
        new ComponentCategory
        {
            Name = "Case",
            IconClass = "bi bi-case",
        },
        new ComponentCategory
        {
            Name = "Monitor",
            IconClass = "bi bi-monitor",
        },
        new ComponentCategory
        {
            Name = "Mouse",
            IconClass = "bi bi-mouse",
        },
        new ComponentCategory
        {
            Name = "Keyboard",
            IconClass = "bi bi-keyboard",
        }
    };

    // Opens the model to select a component
    private async Task OpenComponentSelection(ComponentCategory category)
    {
        CurrentCategory = category;
        CurrentOptions = await ComponentProvider.GetComponentsByCategoryAsync(category);
        ShowModel = true;
    }

    // Selects a component and closes the modal
    private void SelectComponent(Component component)
    {
        SelectedComponents[CurrentCategory.Name] = component;
        ShowModel = false;
    }

    // Closes the model
    private void CloseModal()
    {
        ShowModel = false;
    }

    // Submit the build (you can extend this logic)
    private void SubmitBuild()
    {
        NavigationManager.NavigateTo("/summary"); 
    }

}