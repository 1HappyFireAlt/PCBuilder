@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using PCBuilder.Components.Account.Shared
@using PCBuilder.Model
@using BlazorDateRangePicker
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
    <DataAnnotationsValidator/>

    <div class="row">
        <div class="col-lg-6 col-12 mt-lg-1 mt-1">
            <div class="card";">
                <div class="card-body">
                    <h3>Register</h3>
                    <h5 class="card-title">About you</h5>
                    <div class="form-group mb-2">
                        <label for="name">Name</label>
                        <InputText id="name" class="form-control border-success" placeholder="Name" @bind-Value="Model.Name" />
                        <div class="small">
                            <ValidationMessage For="@(() => Model!.Name)" />
                        </div>
                    </div>
                    <div class="form-group mb-2">
                        <label for="gender" class="form-label">Gender</label>
                        <InputSelect class="form-control border-success" @bind-Value="Model.Gender" placeholder="Select Gender">
                                <option value="Male" selected>Male</option>
                                <option value="Female" selected>Female</option>
                                <option value="Other" selected>Other</option>
                                <option value="Rather not say" selected>Rather not say</option>
                        </InputSelect>
                        <div class="small">
                            <ValidationMessage For="@(() => Model!.Gender)" />
                        </div>
                    </div>
                
                    <form class="row g-3">
                        <h5 class="card-title">Login details</h5>

                        <div class="form-group mb-2">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control border-success" placeholder="you@example.com" @bind-Value="Model.Email" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.Email)" />
                            </div>
                        </div>
                        <div class="form-group mb-2">
                            <label for="dateofbirth" class="form-label">Date of Birth</label>
                            <InputDate id="dateofbirth" class="form-control border-success" @bind-Value="Model.DateOfBirth" placeholder="MM/DD/YYYY" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.DateOfBirth)" />
                            </div>
                            <small class="form-text text-muted">
                                You must be at least 13 years old to register.
                            </small>
                        </div>
                        <div class="form-group mb-2">
                            <label for="street">Street</label>
                            <InputText id="street" class="form-control border-success" placeholder="Street" @bind-Value="Model.Address" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.Address)" />
                            </div>
                        </div>
                        <div class="form-group mb-2">
                            <label for="city">City</label>
                            <InputText id="city" class="form-control border-success" placeholder="City" @bind-Value="Model.City" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.City)" />
                            </div>
                        </div>
                        <div class="form-group mb-2">
                            <label for="postcode">Post Code</label>
                            <InputText id="postcode" class="form-control border-successii" placeholder="Post Code" @bind-Value="Model.PostCode" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.PostCode)" />
                            </div>
                        </div>
                        <div class="form-group mb-2">
                            <label for="password">Password</label>
                            <InputText id="password" type="password" class="form-control border-success" placeholder="Password" @bind-Value="Model.Password" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.Password)" />
                            </div>
                        </div>
                        <div class="form-group mb-2">
                            <label for="confirm">Confirm Password</label>
                            <InputText id="confirm" type="password" class="form-control border-success" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.ConfirmPassword)" />
                            </div>
                        </div>
                        <div class="form-group mb-2">
                            <button type="submit" class="btn btn-primary">Register</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();
    private string ValidationMessage { get; set; } = string.Empty;
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new User
        {
                UserName = Model.Email,
                Email = Model.Email,
                Name = Model.Name,
                Gender = Model.Gender,
                DateOfBirth = Model.DateOfBirth,
                Address = Model.Address,
                City = Model.City,
                PostCode = Model.PostCode
        };


        var result = await UserManager.CreateAsync(user, Model.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }
        await UserManager.AddToRoleAsync(user, "Customer");

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class RegisterModel
    {
        [Required(ErrorMessage = "Please enter your email.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Please enter a password.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Please enter your first name.")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Please enter your gender.")]
        public string Gender { get; set; } = "";

        [Required(ErrorMessage = "Please enter your date of birth")]
        public DateTime? DateOfBirth { get; set; }

        [Required(ErrorMessage = "Please enter your address.")]
        public string Address { get; set; } = "";

        [Required(ErrorMessage = "Please enter your city.")]
        public string City { get; set; } = "";

        [Required(ErrorMessage = "Please enter your post code.")]
        public string PostCode { get; set; } = "";

    }
}
